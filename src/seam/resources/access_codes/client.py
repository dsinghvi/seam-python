# This file was auto-generated by Fern from our API Definition.

import typing
import urllib.parse
from json.decoder import JSONDecodeError

import httpx
import pydantic

from ...core.api_error import ApiError
from ...core.jsonable_encoder import jsonable_encoder
from ...core.remove_none_from_headers import remove_none_from_headers
from ...environment import SeamEnvironment
from ...errors.bad_request_error import BadRequestError
from ...errors.unauthorized_error import UnauthorizedError
from ...types.access_codes_create_response import AccessCodesCreateResponse
from ...types.access_codes_delete_response import AccessCodesDeleteResponse
from ...types.access_codes_update_put_request_type import AccessCodesUpdatePutRequestType
from ...types.access_codes_update_put_response import AccessCodesUpdatePutResponse

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class AccessCodesClient:
    def __init__(self, *, environment: SeamEnvironment = SeamEnvironment.DEFAULT, token: str):
        self._environment = environment
        self._token = token

    def access_codes_create(
        self,
        *,
        device_id: str,
        name: typing.Optional[str] = OMIT,
        starts_at: typing.Optional[str] = OMIT,
        ends_at: typing.Optional[str] = OMIT,
        code: typing.Optional[str] = OMIT,
        sync: typing.Optional[bool] = OMIT,
        attempt_for_offline_device: typing.Optional[bool] = OMIT,
        common_code_key: typing.Optional[str] = OMIT,
    ) -> AccessCodesCreateResponse:
        _request: typing.Dict[str, typing.Any] = {"device_id": device_id}
        if name is not OMIT:
            _request["name"] = name
        if starts_at is not OMIT:
            _request["starts_at"] = starts_at
        if ends_at is not OMIT:
            _request["ends_at"] = ends_at
        if code is not OMIT:
            _request["code"] = code
        if sync is not OMIT:
            _request["sync"] = sync
        if attempt_for_offline_device is not OMIT:
            _request["attempt_for_offline_device"] = attempt_for_offline_device
        if common_code_key is not OMIT:
            _request["common_code_key"] = common_code_key
        _response = httpx.request(
            "POST",
            urllib.parse.urljoin(f"{self._environment.value}/", "access_codes/create"),
            json=jsonable_encoder(_request),
            headers=remove_none_from_headers(
                {"Authorization": f"Bearer {self._token}" if self._token is not None else None}
            ),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(AccessCodesCreateResponse, _response.json())  # type: ignore
        if _response.status_code == 400:
            raise BadRequestError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 401:
            raise UnauthorizedError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def access_codes_delete(
        self, *, device_id: typing.Optional[str] = OMIT, access_code_id: str, sync: typing.Optional[bool] = OMIT
    ) -> AccessCodesDeleteResponse:
        _request: typing.Dict[str, typing.Any] = {"access_code_id": access_code_id}
        if device_id is not OMIT:
            _request["device_id"] = device_id
        if sync is not OMIT:
            _request["sync"] = sync
        _response = httpx.request(
            "POST",
            urllib.parse.urljoin(f"{self._environment.value}/", "access_codes/delete"),
            json=jsonable_encoder(_request),
            headers=remove_none_from_headers(
                {"Authorization": f"Bearer {self._token}" if self._token is not None else None}
            ),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(AccessCodesDeleteResponse, _response.json())  # type: ignore
        if _response.status_code == 400:
            raise BadRequestError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 401:
            raise UnauthorizedError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def access_codes_update_put(
        self,
        *,
        name: typing.Optional[str] = OMIT,
        starts_at: typing.Optional[str] = OMIT,
        ends_at: typing.Optional[str] = OMIT,
        code: typing.Optional[str] = OMIT,
        sync: typing.Optional[bool] = OMIT,
        attempt_for_offline_device: typing.Optional[bool] = OMIT,
        access_code_id: str,
        device_id: typing.Optional[str] = OMIT,
        type: typing.Optional[AccessCodesUpdatePutRequestType] = OMIT,
    ) -> AccessCodesUpdatePutResponse:
        _request: typing.Dict[str, typing.Any] = {"access_code_id": access_code_id}
        if name is not OMIT:
            _request["name"] = name
        if starts_at is not OMIT:
            _request["starts_at"] = starts_at
        if ends_at is not OMIT:
            _request["ends_at"] = ends_at
        if code is not OMIT:
            _request["code"] = code
        if sync is not OMIT:
            _request["sync"] = sync
        if attempt_for_offline_device is not OMIT:
            _request["attempt_for_offline_device"] = attempt_for_offline_device
        if device_id is not OMIT:
            _request["device_id"] = device_id
        if type is not OMIT:
            _request["type"] = type
        _response = httpx.request(
            "PUT",
            urllib.parse.urljoin(f"{self._environment.value}/", "access_codes/update"),
            json=jsonable_encoder(_request),
            headers=remove_none_from_headers(
                {"Authorization": f"Bearer {self._token}" if self._token is not None else None}
            ),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(AccessCodesUpdatePutResponse, _response.json())  # type: ignore
        if _response.status_code == 400:
            raise BadRequestError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 401:
            raise UnauthorizedError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncAccessCodesClient:
    def __init__(self, *, environment: SeamEnvironment = SeamEnvironment.DEFAULT, token: str):
        self._environment = environment
        self._token = token

    async def access_codes_create(
        self,
        *,
        device_id: str,
        name: typing.Optional[str] = OMIT,
        starts_at: typing.Optional[str] = OMIT,
        ends_at: typing.Optional[str] = OMIT,
        code: typing.Optional[str] = OMIT,
        sync: typing.Optional[bool] = OMIT,
        attempt_for_offline_device: typing.Optional[bool] = OMIT,
        common_code_key: typing.Optional[str] = OMIT,
    ) -> AccessCodesCreateResponse:
        _request: typing.Dict[str, typing.Any] = {"device_id": device_id}
        if name is not OMIT:
            _request["name"] = name
        if starts_at is not OMIT:
            _request["starts_at"] = starts_at
        if ends_at is not OMIT:
            _request["ends_at"] = ends_at
        if code is not OMIT:
            _request["code"] = code
        if sync is not OMIT:
            _request["sync"] = sync
        if attempt_for_offline_device is not OMIT:
            _request["attempt_for_offline_device"] = attempt_for_offline_device
        if common_code_key is not OMIT:
            _request["common_code_key"] = common_code_key
        async with httpx.AsyncClient() as _client:
            _response = await _client.request(
                "POST",
                urllib.parse.urljoin(f"{self._environment.value}/", "access_codes/create"),
                json=jsonable_encoder(_request),
                headers=remove_none_from_headers(
                    {"Authorization": f"Bearer {self._token}" if self._token is not None else None}
                ),
                timeout=60,
            )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(AccessCodesCreateResponse, _response.json())  # type: ignore
        if _response.status_code == 400:
            raise BadRequestError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 401:
            raise UnauthorizedError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def access_codes_delete(
        self, *, device_id: typing.Optional[str] = OMIT, access_code_id: str, sync: typing.Optional[bool] = OMIT
    ) -> AccessCodesDeleteResponse:
        _request: typing.Dict[str, typing.Any] = {"access_code_id": access_code_id}
        if device_id is not OMIT:
            _request["device_id"] = device_id
        if sync is not OMIT:
            _request["sync"] = sync
        async with httpx.AsyncClient() as _client:
            _response = await _client.request(
                "POST",
                urllib.parse.urljoin(f"{self._environment.value}/", "access_codes/delete"),
                json=jsonable_encoder(_request),
                headers=remove_none_from_headers(
                    {"Authorization": f"Bearer {self._token}" if self._token is not None else None}
                ),
                timeout=60,
            )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(AccessCodesDeleteResponse, _response.json())  # type: ignore
        if _response.status_code == 400:
            raise BadRequestError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 401:
            raise UnauthorizedError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def access_codes_update_put(
        self,
        *,
        name: typing.Optional[str] = OMIT,
        starts_at: typing.Optional[str] = OMIT,
        ends_at: typing.Optional[str] = OMIT,
        code: typing.Optional[str] = OMIT,
        sync: typing.Optional[bool] = OMIT,
        attempt_for_offline_device: typing.Optional[bool] = OMIT,
        access_code_id: str,
        device_id: typing.Optional[str] = OMIT,
        type: typing.Optional[AccessCodesUpdatePutRequestType] = OMIT,
    ) -> AccessCodesUpdatePutResponse:
        _request: typing.Dict[str, typing.Any] = {"access_code_id": access_code_id}
        if name is not OMIT:
            _request["name"] = name
        if starts_at is not OMIT:
            _request["starts_at"] = starts_at
        if ends_at is not OMIT:
            _request["ends_at"] = ends_at
        if code is not OMIT:
            _request["code"] = code
        if sync is not OMIT:
            _request["sync"] = sync
        if attempt_for_offline_device is not OMIT:
            _request["attempt_for_offline_device"] = attempt_for_offline_device
        if device_id is not OMIT:
            _request["device_id"] = device_id
        if type is not OMIT:
            _request["type"] = type
        async with httpx.AsyncClient() as _client:
            _response = await _client.request(
                "PUT",
                urllib.parse.urljoin(f"{self._environment.value}/", "access_codes/update"),
                json=jsonable_encoder(_request),
                headers=remove_none_from_headers(
                    {"Authorization": f"Bearer {self._token}" if self._token is not None else None}
                ),
                timeout=60,
            )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(AccessCodesUpdatePutResponse, _response.json())  # type: ignore
        if _response.status_code == 400:
            raise BadRequestError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 401:
            raise UnauthorizedError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
